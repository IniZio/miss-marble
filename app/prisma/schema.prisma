// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Translation {
  id   String @id @default(uuid())
  text Json

  products            Product[]
  productFields       ProductField[]
  productFieldOptions ProductFieldOption[]
  productCollections  ProductCollection[]
  currencies          Currency[]
}

model Asset {
  id        String @id @default(uuid())
  provider  String
  bucket    String
  objectKey String
  mimeType  String
  url       String

  products               Product[]
  cartProductFieldValues CartProductFieldValue[]
}

model Product {
  id String @id @default(uuid())

  name              Translation @relation(fields: [nameTranslationId], references: [id])
  nameTranslationId String

  gallery Asset[]
  fields  ProductField[]

  prices MoneyAmount[]

  variants    ProductVariant[]
  collections ProductCollection[]
  lineItems   LineItem[]

  deletedAt DateTime?
}

model ProductField {
  id   String @id @default(uuid())
  // SELECT | MULTISELECT | TEXT | ASSET
  type String

  name              Translation @relation(fields: [nameTranslationId], references: [id])
  nameTranslationId String

  prices MoneyAmount[]

  products     Product[]
  fieldOptions ProductFieldOption[]

  remarks String?

  deletedAt DateTime?
}

model ProductFieldOption {
  id String @id @default(uuid())

  name              Translation @relation(fields: [nameTranslationId], references: [id])
  nameTranslationId String

  field   ProductField @relation(fields: [fieldId], references: [id])
  fieldId String

  variants               ProductVariant[]
  cartProductFieldValues CartProductFieldValue[]
  variantFieldValues     ProductVariantFieldValue[]

  prices MoneyAmount[]

  deletedAt DateTime?
}

model ProductVariant {
  id String @id @default(uuid())

  product   Product @relation(fields: [productId], references: [id])
  productId String

  prices MoneyAmount[]

  fieldOptions ProductFieldOption[]
  lineItems    LineItem[]
  fieldValues  ProductVariantFieldValue[]

  deletedAt DateTime?
}

model ProductVariantFieldValue {
  id String @id @default(uuid())

  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String

  fieldOption   ProductFieldOption @relation(fields: [fieldOptionId], references: [id])
  fieldOptionId String

  deletedAt DateTime?
}

model ProductCollection {
  id   String @id @default(uuid())
  slug String @unique

  name              Translation @relation(fields: [nameTranslationId], references: [id])
  nameTranslationId String

  products Product[]
}

model Cart {
  id String @id @default(uuid())

  items LineItem[]

  email String?

  billingAddress    Address? @relation("billingAddress", fields: [billingAddresssId], references: [id])
  billingAddresssId String?

  shippingAddress    Address? @relation("shippingAddress", fields: [shippingAddresssId], references: [id])
  shippingAddresssId String?

  currency   Currency @relation(fields: [currencyCode], references: [code])
  currencyCode String

  subtotal      Int
  total         Int
  discountTotal Int
  shippingTotal Int
}

model LineItem {
  id String @id @default(uuid())

  quantity Int

  product   Product @relation(fields: [productId], references: [id])
  productId String

  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId String?

  cart   Cart?   @relation(fields: [cartId], references: [id])
  cartId String?

  productFieldValues CartProductFieldValue[]

  subtotal      Int
  shippingTotal Int
  total         Int
}

model CartProductFieldValue {
  id String @id @default(uuid())

  lineItem   LineItem @relation(fields: [lineItemId], references: [id])
  lineItemId String

  fieldOption   ProductFieldOption? @relation(fields: [fieldOptionId], references: [id])
  fieldOptionId String?

  fieldFieldValue String?

  fieldOptionAsset   Asset?  @relation(fields: [fieldOptionAssetId], references: [id])
  fieldOptionAssetId String?
}

model Address {
  id String @id @default(uuid())

  firstName String?
  lastName  String
  address1  String
  address2  String?
  // city          String
  // zip           String
  // countryCode  String

  billingCarts  Cart[] @relation("billingAddress")
  shippingCarts Cart[] @relation("shippingAddress")
}

model Currency {
  code   String @unique
  symbol String

  name              Translation @relation(fields: [nameTranslationId], references: [id])
  nameTranslationId String

  carts        Cart[]
  moneyAmounts MoneyAmount[]
}

model MoneyAmount {
  id String @id @default(uuid())

  currency   Currency @relation(fields: [currencyCode], references: [code])
  currencyCode String

  amount              Int
  productFields       ProductField[]
  productVariants     ProductVariant[]
  productFieldOptions ProductFieldOption[]
  products             Product[]
}
