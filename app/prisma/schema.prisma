// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Translation {
  id   String @id @default(uuid())
  text Json

  products                   Product[]
  productFields              ProductField[]
  productFieldOptions        ProductFieldOption[]
  productCollections         ProductCollection[]
  currenciess                Currency[]
  shippingOptionNames        ShippingOption[]     @relation("name")
  shippingOptionInstructions ShippingOption[]     @relation("instructions")
  shippingProviderNames      ShippingProvider[]   @relation("name")
  paymentProviderName        PaymentProvider[]    @relation("name")
  paymentOptionNames         PaymentOption[]      @relation("name")
  paymentOptionInstructions  PaymentOption[]      @relation("instructions")
}

model Asset {
  id        String @id @default(uuid())
  provider  String
  bucket    String
  objectKey String
  mimeType  String
  url       String

  products               Product[]
  cartProductFieldValues CartProductFieldValue[]
  inventoryItems         InventoryItem[]
}

model Product {
  id String @id @default(uuid())

  name              Translation @relation(fields: [nameTranslationId], references: [id], onDelete: Cascade)
  nameTranslationId String

  gallery Asset[]
  fields  ProductFieldToProduct[]

  prices MoneyAmount[]

  variants    ProductVariant[]
  collections ProductCollection[]
  lineItems   LineItem[]

  deletedAt DateTime?
}

model ProductField {
  id    String @id @default(uuid())
  alias String
  // SELECT | MULTISELECT | TEXT | ASSET
  type  String

  name              Translation @relation(fields: [nameTranslationId], references: [id], onDelete: Cascade)
  nameTranslationId String

  prices MoneyAmount[]

  products     ProductFieldToProduct[]
  fieldOptions ProductFieldOption[]

  deletedAt              DateTime?
  cartProductFieldValues CartProductFieldValue[]

  remark String?
}

model ProductFieldToProduct {
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  field   ProductField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  required Boolean @default(false)

  @@id([productId, fieldId])
}

model ProductFieldOption {
  id String @id @default(uuid())

  name              Translation @relation(fields: [nameTranslationId], references: [id], onDelete: Cascade)
  nameTranslationId String

  field   ProductField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  variants               ProductVariant[]
  cartProductFieldValues CartProductFieldValue[]
  variantFieldValues     ProductVariantFieldValue[]

  prices MoneyAmount[]

  deletedAt DateTime?
}

model ProductVariant {
  id String @id @default(uuid())

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  prices MoneyAmount[]

  fieldOptions ProductFieldOption[]
  lineItems    LineItem[]
  fieldValues  ProductVariantFieldValue[]

  deletedAt DateTime?
}

model ProductVariantFieldValue {
  id String @id @default(uuid())

  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String

  fieldOption   ProductFieldOption @relation(fields: [fieldOptionId], references: [id], onDelete: Cascade)
  fieldOptionId String

  deletedAt DateTime?
}

model ProductCollection {
  id   String @id @default(uuid())
  slug String @unique

  name              Translation @relation(fields: [nameTranslationId], references: [id], onDelete: Cascade)
  nameTranslationId String

  products Product[]
}

model Cart {
  id String @id @default(uuid())

  items LineItem[]

  name          String?
  phoneNumber   String?
  socialHandle  String?
  socialChannel String?

  billingAddress    Address? @relation("billingAddress", fields: [billingAddresssId], references: [id], onDelete: Cascade)
  billingAddresssId String?

  shippingAddress    Address? @relation("shippingAddress", fields: [shippingAddresssId], references: [id], onDelete: Cascade)
  shippingAddresssId String?

  currency     Currency @relation(fields: [currencyCode], references: [code], onDelete: Cascade)
  currencyCode String

  shippingOption   ShippingOption? @relation(fields: [shippingOptionId], references: [id], onDelete: Cascade)
  shippingOptionId String?

  deliveryDate DateTime?

  remark String?

  subtotal      Int
  total         Int
  discountTotal Int
  shippingTotal Int

  orders Order[]
}

model LineItem {
  id String @id @default(uuid())

  quantity Int

  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?

  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String?

  cart   Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String?

  productFieldValues CartProductFieldValue[]

  subtotal      Int
  shippingTotal Int
  total         Int

  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String?
}

model CartProductFieldValue {
  id String @id @default(uuid())

  lineItem   LineItem @relation(fields: [lineItemId], references: [id], onDelete: Cascade)
  lineItemId String

  field   ProductField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  fieldOption   ProductFieldOption? @relation(fields: [fieldOptionId], references: [id], onDelete: Cascade)
  fieldOptionId String?

  fieldValue String?

  fieldOptionAsset   Asset?  @relation(fields: [fieldOptionAssetId], references: [id], onDelete: Cascade)
  fieldOptionAssetId String?
}

model Address {
  id String @id @default(uuid())

  name     String?
  address1 String
  address2 String?
  // city          String
  // zip           String
  // countryCode  String

  billingCarts  Cart[] @relation("billingAddress")
  shippingCarts Cart[] @relation("shippingAddress")

  billingOrders  Order[] @relation("billingAddress")
  shippingOrders Order[] @relation("shippingAddress")
}

model Currency {
  code   String @unique
  symbol String

  name              Translation @relation(fields: [nameTranslationId], references: [id], onDelete: Cascade)
  nameTranslationId String

  carts        Cart[]
  moneyAmounts MoneyAmount[]
  orders       Order[]
}

model MoneyAmount {
  id String @id @default(uuid())

  currency     Currency @relation(fields: [currencyCode], references: [code], onDelete: Cascade)
  currencyCode String

  amount              Int
  productFields       ProductField[]
  productVariants     ProductVariant[]
  productFieldOptions ProductFieldOption[]
  products            Product[]
  shippingOptions     ShippingOption[]
}

model ShippingOption {
  id String @id @default(uuid())

  name              Translation @relation(name: "name", fields: [nameTranslationId], references: [id], onDelete: Cascade)
  nameTranslationId String

  instructions              Translation? @relation(name: "instructions", fields: [instructionsTranslationId], references: [id], onDelete: Cascade)
  instructionsTranslationId String?

  // FLAT_RATE | CALCULATED | MANUAL
  priceType String

  price   MoneyAmount? @relation(fields: [priceId], references: [id], onDelete: Cascade)
  priceId String?

  carts Cart[]

  shippingProvider   ShippingProvider? @relation(fields: [shippingProviderId], references: [id], onDelete: Cascade)
  shippingProviderId String?
  orders             Order[]
}

// Ths "plugin code" part of shipping
model ShippingProvider {
  id String @id @default(uuid())

  name              Translation @relation(name: "name", fields: [nameTranslationId], references: [id], onDelete: Cascade)
  nameTranslationId String

  options ShippingOption[]
}

model PaymentOption {
  id String @id @default(uuid())

  name              Translation @relation(name: "name", fields: [nameTranslationId], references: [id], onDelete: Cascade)
  nameTranslationId String

  instructions              Translation? @relation(name: "instructions", fields: [instructionsTranslationId], references: [id], onDelete: Cascade)
  instructionsTranslationId String?

  paymentProvider   PaymentProvider? @relation(fields: [paymentProviderId], references: [id], onDelete: Cascade)
  paymentProviderId String?
}

model PaymentProvider {
  id String @id @default(uuid())

  name              Translation @relation(name: "name", fields: [nameTranslationId], references: [id], onDelete: Cascade)
  nameTranslationId String

  paymentOptions PaymentOption[]
}

model Order {
  id           String   @id @default(uuid())
  externalId   String?  @unique
  externalData String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  cart   Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String?

  items LineItem[]

  name          String
  phoneNumber   String?
  socialHandle  String?
  socialChannel String?

  billingAddress    Address? @relation("billingAddress", fields: [billingAddresssId], references: [id], onDelete: Cascade)
  billingAddresssId String?

  shippingAddress    Address @relation("shippingAddress", fields: [shippingAddresssId], references: [id], onDelete: Cascade)
  shippingAddresssId String

  currency     Currency @relation(fields: [currencyCode], references: [code], onDelete: Cascade)
  currencyCode String

  shippingOption   ShippingOption @relation(fields: [shippingOptionId], references: [id], onDelete: Cascade)
  shippingOptionId String

  deliveryDate DateTime

  remark String?

  subtotal      Int
  total         Int
  discountTotal Int
  shippingTotal Int

  paymentStatus     String @default("NOT_PAID")
  fulfillmentStatus String @default("NOT_FULFILLED")

  @@index([externalData], name: "externalData")
  @@index([deliveryDate], name: "deliveryDate")
  @@index([phoneNumber], name: "phoneNumber")
  @@index([socialHandle], name: "socialHandle")
}

model InventoryItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  externalId String? @unique
  externalData String?

  sku String @unique
  name String

  thumbnail           Asset?             @relation(fields: [thumbnailId], references: [id])
  thumbnailId         String?            @map("thumbnailId")

  category            InventoryCategory? @relation(fields: [categoryId], references: [id])
  categoryId String?

  stockLocations StockLocation[]
  inventoryLevels InventoryLevel[]
}

model InventoryCategory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique

  items InventoryItem[]
}

model StockLocation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique

  inventoryItems InventoryItem[]
  inventoryLevels InventoryLevel[]
}

model InventoryLevel {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  item   InventoryItem @relation(fields: [itemId], references: [id])
  itemId String

  stockLocation   StockLocation @relation(fields: [stockLocationId], references: [id])
  stockLocationId String

  name String
  quantity Int

  @@unique([itemId, stockLocationId, name], name: "inventoryItemStockLocation")
}
